{"meta":{"title":"一番码客","subtitle":"效率软件推荐","description":"软件推荐、软件开发实战代码","author":"一番码客","url":"http://www.efonmark.com","root":"/"},"pages":[],"posts":[{"title":"一番码客","slug":"首页/readme","date":"2022-12-31T16:00:00.000Z","updated":"2023-01-15T04:57:59.271Z","comments":true,"path":"2023/01/01/首页/readme/","link":"","permalink":"http://www.efonmark.com/2023/01/01/%E9%A6%96%E9%A1%B5/readme/","excerpt":"微信公众号：一番码客 微信：Efon-fighting 网站：www.efonmark.com","text":"微信公众号：一番码客 微信：Efon-fighting 网站：www.efonmark.com 网站： www.efonmark.com 微信公众号 一番码客 微信Efon-Fighting","categories":[],"tags":[]},{"title":"一番码客-极客工具","slug":"首页/efonmark_tools","date":"2022-12-31T16:00:00.000Z","updated":"2023-01-15T04:40:54.295Z","comments":true,"path":"2023/01/01/首页/efonmark_tools/","link":"","permalink":"http://www.efonmark.com/2023/01/01/%E9%A6%96%E9%A1%B5/efonmark_tools/","excerpt":"极客工具 最新版本 一番码客 - MarkTool marktool_v1.2.1.zip","text":"极客工具 最新版本 一番码客 - MarkTool marktool_v1.2.1.zip 1 介绍1.1 使用注意 杀毒软件可能误报病毒，添加信任即可； 只支持64位windows系统； 请勿删除config文件夹； 1.2 主界面 1.3 目录结构解压后目录结构如下： 1.4 功能：喜马拉雅音频下载说明 该版本只可下载免费的喜马拉雅音频。 搜索专辑: 输入想要下载的专辑关键字，点击进行搜索 双击搜索结果可显示该专辑节目列表 打开链接： 输入喜马拉雅专辑的网址连接 输入框粘贴使用ctrl+v 保存路径： 点击修改下载文件所要保存的路径 保存名：下载次序编号_节目名.mp3 下载选中： 可ctrl+a全选，也可按住ctrl用鼠标多选 选中要下载的文件，点击开始下载 搜索专辑的方式 打开链接的方式 效果 1.5 功能：公众号网页下载(β) 已适配网站: 微信公众号文章 注意： 只针对可以公开访问的网站 无法下载需要登陆的网站 未适配网站可能存在格式异常 建议每次输入网址不超过500个 输入框粘贴使用Ctrl+v 功能说明： 下载网页保存到本地 保存形式：html + 图片 + PDF(可选) 保存名：下载时间_网页名 1.6 功能：PDF合并 功能说明： 合并后的文档带目录。 最多支持400个文档的合并。 如有损坏文件，将自动跳过。 使用说明: 点击“选择要合并的文档”。 如需调整顺序，在文本框内直接编辑。 保证路径的完整性，一个文件一行。 点击“开始合并”。 选择保存路径并输入保存名称。 2 更新日志v1.2.1 [2021-06-27 发布] md5：12ea7302fd54573f3c393509c520ed11 marktool_v1.2.1_win64.exe 添加喜马拉雅专辑下载功能 v1.1.1 [2020-06-07 发布] 微信公众号网页下载功能，保存html+图片+PDF PDF合并功能","categories":[],"tags":[]},{"title":"python爬虫实战-微信公众号文章下载-(03)python开源库做图文识别","slug":"软件开发实战/2019-04-13-python爬虫实战-微信公众号文章下载-(03)python开源库做图文识别","date":"2019-04-12T16:00:00.000Z","updated":"2023-01-15T04:59:14.749Z","comments":true,"path":"2019/04/13/软件开发实战/2019-04-13-python爬虫实战-微信公众号文章下载-(03)python开源库做图文识别/","link":"","permalink":"http://www.efonmark.com/2019/04/13/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/2019-04-13-python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E4%B8%8B%E8%BD%BD-(03)python%E5%BC%80%E6%BA%90%E5%BA%93%E5%81%9A%E5%9B%BE%E6%96%87%E8%AF%86%E5%88%AB/","excerpt":"一番码客 : 效率软件推荐www.efonmark.com 前面我们讲到了adb的封装，里面具体讲到到了在一副图片中寻找目标的坐标并点击。这篇文章我们讲讲对一副图片的特定区域做截取，并利用开源库做图纹识别。要实现这个步骤的原因是，最初想实现爬取微信公众号历史文章这个功能时，一番没有抓包爬虫经验，于是为了获取历史文章的标题用于pdf打印时的命名，一番想到截图后对图片做图文识别，然后点击文章标题，进入到文章阅读界面然后结合目标图片识别“复制链接”来获取到文章的链接。","text":"一番码客 : 效率软件推荐www.efonmark.com 前面我们讲到了adb的封装，里面具体讲到到了在一副图片中寻找目标的坐标并点击。这篇文章我们讲讲对一副图片的特定区域做截取，并利用开源库做图纹识别。要实现这个步骤的原因是，最初想实现爬取微信公众号历史文章这个功能时，一番没有抓包爬虫经验，于是为了获取历史文章的标题用于pdf打印时的命名，一番想到截图后对图片做图文识别，然后点击文章标题，进入到文章阅读界面然后结合目标图片识别“复制链接”来获取到文章的链接。 安装 tesseract-ocrtesserat是一个开源的文字识别引擎，目前已经开发到4.0版本，训练支持了100+种的语言了。这里安装以ubunut18.04为例。 安装分为两部分: 安装引擎对于ubuntu18.04来说安装很简单，两条命令搞定： sudo apt install tesseract-ocrsudo apt install libtesseract-dev 安装需要识别语言的现有训练库:安装简体中文的识别库： sudo apt install tesseract-ocr-chi-sim 如果是英文识别库： sudo apt install tesseract-ocr-eng 如果是windows，下载对应的32位或64位安装包，然后将下载的语言识别库“xxx.traineddata”放到安装目录（比如C:\\Program Files\\Tesseract-OCR\\tessdata）下。对于mac或者其他版本linux系统的安装方式，当然包括windows详细安装教程，请参考tesseract-ocr官方github的wiki（当然是英文的啦）。 后台回复关键字 “ tesseract-ocr ” 获取官方工程github地址和windows安装包、语言包。 安装完成之后你发现就可以用tesseract命令啦。 python结合pytesseract做图文识别首先确保安装了python pytesseract包， pycharm 请在setting里安装。 终端安装直接 “pip3 install pytesseract”。 接下来就可以直接通过python调用pytesseract的接口做图文识别啦。下面以一幅手机屏幕截图为例。 这里标定每篇文章题目的范围，如图红框。 test代码 1234567891011121314151617181920212223242526272829303132333435def test(): from PIL import Image import pytesseract import matplotlib.pyplot as plt #读取图片，并截取其中的一部分 img = Image.open(&quot;/home/soy/Desktop/一番码客.jpg&quot;) grey = img.convert(&#x27;L&#x27;) # 只留取亮度信息，转换为黑白色，有利于文字识别 cutPic = grey.crop((25, 270, 690, 540)) # 上图红框里的范围(x1,y1,x2,y2) #这里为了将所有非白色的像素点转换为纯黑色，有利于增高文字的锐度、清晰度。 xSize = cutPic.size[0] ySize = cutPic.size[1] for y in range(ySize): for x in range(xSize): if(cutPic.getpixel((x,y)) != 255): cutPic.putpixel((x,y),0) #展示处理后的图像 plt.imshow(cutPic) plt.show() #图文识别 itemStr = pytesseract.image_to_string((cutPic), lang=&#x27;chi_sim&#x27;).replace(&#x27; &#x27;, &#x27;&#x27;) print(itemStr) #文字拼接处理 itemStrList = itemStr.split(&#x27;\\n&#x27;,8) dateStr = itemStrList[len(itemStrList)-1] topicStr = &#x27;&#x27; for idx in range (len(itemStrList)-1): topicStr += itemStrList[idx] #处理后的文字 print(dateStr+&#x27;_&#x27;+topicStr) 处理后图片： 识别结果： 结语怎么样，用python做图文识别是不是超简单？这就是python的魅力所在啊。那么获取每篇文章的思路就是： 通过OCR获取最上面一篇的文章标题； 点击进去，通过图像目标查找，点击“复制文章链接”按钮，并将链接传回PC保存； 返回，向下滑动页面刚好一栏标题，重复1。 通关！ 人生的蜕变不知是否一定需要伴随着痛苦，但从很多经验来看，这条路是行得通的。你承受了人生的痛苦，也经历着世间的繁华。无所谓不可承受之重。 微信公众号：一番码客官方网站： www.efonmark.com","categories":[{"name":"软件开发实战","slug":"软件开发实战","permalink":"http://www.efonmark.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"}],"tags":[]},{"title":"python爬虫实战-微信公众号文章下载-(02)python封装adb命令操作安卓手机","slug":"软件开发实战/2019-03-28-python爬虫实战-微信公众号文章下载-(02)python封装adb命令操作安卓手机","date":"2019-03-27T16:00:00.000Z","updated":"2023-01-15T04:59:23.140Z","comments":true,"path":"2019/03/28/软件开发实战/2019-03-28-python爬虫实战-微信公众号文章下载-(02)python封装adb命令操作安卓手机/","link":"","permalink":"http://www.efonmark.com/2019/03/28/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/2019-03-28-python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E4%B8%8B%E8%BD%BD-(02)python%E5%B0%81%E8%A3%85adb%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA/","excerpt":"一番码客 : 效率软件推荐。www.efonmark.com 让大家久等了，来不及解释（jiaobian）了，让我们上车吧。正如一番在这个系列文章的（00）篇中所说，一番在做1.0版本的时候用到了一些取巧的方法，其中就包括python通过adb操作手机。","text":"一番码客 : 效率软件推荐。www.efonmark.com 让大家久等了，来不及解释（jiaobian）了，让我们上车吧。正如一番在这个系列文章的（00）篇中所说，一番在做1.0版本的时候用到了一些取巧的方法，其中就包括python通过adb操作手机。 之前微信第一款小程序游戏“跳一跳”突然火起来的时候，办公室午休的时候掀起了一股跳一跳的热潮，这个时候也是一番接触python不久。在网上很快就有小伙伴用python做了一个外挂，并传在了github上开源开发。这其中的原理就用到了adb操作和图像处理，鉴于python的使用群体庞大，这个项目也得到了持续的优化和更新，操作对于新手非常友善，也非常值得新手用来学习，有趣又实用（有兴趣的同学，公众号后台回复“跳一跳”获取github源码地址）。 ADB的使用方法及常见命令adb的基本使用方法和常见的命令，接触过安卓调试的同学应该都会。这里给出一个一番觉得比较简洁明了的文章，不了解ADB的同学可以先学习下。 ADB命令集锦 你应该知道的一些 ADB 命令 Android adb shell input 命令详解 这里我们重点提一下“adb shell input” ，这个命令是我们模拟手动操作用的最频繁的一个命令，主要是模拟输入文本、按键事件、点击、滑动等操作，我们在用python封装的时候会重点用到，接下来的代码中大家也会看到。 python adb操作封装首先来看下一番的1.0版本为了采集公众号历史文章的标题和链接，封装了哪些adb操作。这里一番将adb 操作封装为一个AdbOpt类，init() 函数就是创建类的对象时自动执行的初始化函数，类似C++里的构造函数，通常我们在这个函数里做一些类变量的初始化动作。代码如下： 1234567891011121314151617181920212223242526272829303132def __init__(self,phonePara): &#x27;&#x27;&#x27; @ adb 工具类初始化，检查adb路径与环境 @ @ return @ @ param @ phonePara 用于指定手机相关参数 @ exception @ notice &#x27;&#x27;&#x27; print(phonePara) self.deviceId = phonePara[&#x27;serial&#x27;] #创建类之后需要赋值 deviceId if platform.system() == &#x27;Windows&#x27;: adbToolPath = os.path.join(&quot;adb&quot;) self.option = &#x27;&#x27; elif platform.system() == &#x27;Linux&#x27;: adbToolPath = adbPara[&#x27;pcPara&#x27;][&#x27;linux&#x27;][&#x27;adbPath&#x27;] self.option = &#x27; -s &#x27; + self.deviceId else: print(&#x27;Host OS is not compatible.\\n&#x27;) exit(1) print(&#x27;adbToolPath:&#x27; + adbToolPath) try: subprocess.Popen( [adbToolPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE) self.adbToolPath = adbToolPath except OSError: print(&#x27;请安装 ADB 及驱动并配置环境变量&#x27;) exit(1) 这里phonePara，是为了适配多部手机，让一台PC可以同时adb操作多部手机（虽然后面没有用上）。为了存储每部手机的不同参数，和windows、linux的adb路径参数，一番建了一个这个文件里的adbPara变量： 123456789101112131415161718192021adbPara = &#123; &#x27;phonePara&#x27;: &#123; &#x27;HuaweiMate9&#x27;: &#123; &#x27;serial&#x27;: &#x27;3HX0217601006195&#x27;, &#x27;screenSize&#x27;: [1080, 1920] &#125;, &#x27;meizuPro5&#x27;: &#123; &#x27;serial&#x27;: &#x27;860BCNA224M5&#x27;, &#x27;screenSize&#x27;: [1080, 1920] &#125;, &#125;, &#x27;pcPara&#x27;: &#123; &#x27;windows&#x27;: &#123; &#x27;adbPath&#x27;: &#x27;&#x27; &#125;, &#x27;linux&#x27;: &#123; &#x27;adbPath&#x27;: &#x27;/home/efonfighting/Android/Sdk/platform-tools/adb&#x27; &#125;, &#125;&#125; 下面就不一一贴代码了，解释下每个函数的封装，如果需要封装的源码，后台回复“adb”获取。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758testDevice(self): @ 查看是否有设备连接getScreenSize(self): @ adb 获取屏幕分辨率 @ return 屏幕分辨率（eg. &quot;Physical size: 1080x1920 Override size: 720x1280&quot;）getScreenDensity(self): @ 获取屏幕DPI（每英寸点数）getDeviceInfo(self): @ 获取ro.product.devicegetDeviceOsInfo(self): @ 获取ro.build.version.releasedumpDeviceInfo(self): @ 检查设备连接状态，显示设备信息getScreenCapSize(self): @ adb 获取截屏图片分辨率 @ return eg.[720,1280]runAdbCmd(self, rawCommand): @ 执行任意adb命令pullScreenShot(self, savePath): @ 获取屏幕截图 @ adb shell screencap -p /sdcard/screencap.png;adb pull /sdcard/screencap.png ~/DesktopadbTap(self, x, y): @ 单击任意坐标点(x,y)adbSwipe(self, x1, y1, x2, y2, ms, delay): @ 从一点滑动到另一点 @ param @ delay:swipe后delay多少秒返回，等待某些动作缓冲完成drawCircle(self, img, pos): @ 在任意坐标点(x,y)画圆FindFlgFromCap(self, flgPath, confidenceVTH, blockEn, findDelay): @ 在图片中找出特征图案 @ return 特征图案中心坐标(x,y) or None @ param @ confidenceVTH:0.0-1.0 @ blockEn:是否阻塞等待flg出现 @ findDelay: 找到flg后延时findDelay秒后再返回 @ notice 必须像素点匹配def tapFlgFromPic(self, flgPath, confidenceVTH, blockEn, findDelay, tapDelay): @ 单击图片中的特征图案 @ return True/False @ param @ blockEn(bool):是否阻塞等待flg出现 @ findDelay:找到flg后延时findDelay秒后再点击flg @ delayTime:tap后延时时间返回，做某些动作的缓冲时间，单位秒 @ notice 必须像素点匹配 可以看到，为什么有一个runAdbCmd命令可以执行任意adb命令，一番还要单独封装一些常用的比如点击、滑屏等操作呢，其实这是为了方便后续要改动一个操作时，只需要改动这个这个封装的函数就行了，而不必每个用到这个操作的地方都去改动，这也是封装的一个思想。 还有里面封装了一些点击特殊图案的操作，这里涉及到aircv库的操作，这里单独将FindFlgFromCap这个函数提出来说一下。这个函数可以帮我们找到图片中的目标图案，但前提是需要先将这个目标图案在本地保存一个，以作对比，一番估计这个find_template函数的实现原理就是简单的像素点对比。最后会返回一个列表，列表里包括目标图案在搜索源图案中的中心位置以及相似度confidence。如果找到多个目标图案则返回多个列表。这个可以帮助我们确定一些特定图案的位置，然后模拟点击，比如公众号里的“复制连接”图标等。 123456789101112131415161718192021222324252627282930313233343536def FindFlgFromCap(self, flgPath, confidenceVTH, blockEn, findDelay): &#x27;&#x27;&#x27; @ 在图片中找出特征图案 @ @ return 特征图案中心坐标(x,y) or None @ @ param @ confidenceVTH:0.0-1.0 @ blockEn:是否阻塞等待flg出现 @ findDelay: 找到flg后延时findDelay秒后再返回 @ exception @ notice 必须像素点匹配 &#x27;&#x27;&#x27; #process = subprocess.getoutput(&#x27;date +%m%d%H%M%S&#x27;) #date = process.replace(&#x27;\\n&#x27;,&#x27;&#x27;) date = &#x27;&#x27; #不保存时间戳 while True: screenshotPath = self.pullScreenShot(&#x27;out/screencap&#x27; + date + &#x27;.png&#x27;) # eg. out/cap1006120638.png print(screenshotPath) imsrc = ac.imread(screenshotPath) imdst = ac.imread(flgPath) pos = ac.find_template(imsrc, imdst) if ((pos != None) and (pos[&#x27;confidence&#x27;] &gt; confidenceVTH)): print(&#x27;find a &#123;para1&#125;:&#123;para2&#125;&#x27;.format(para1=flgPath,para2=pos)) flgCenterPosInt = (int(pos[&#x27;result&#x27;][0]), int(pos[&#x27;result&#x27;][1])) time.sleep(findDelay) # draw_circle(imsrc, circleCenterPosInt) # draw circle #str(input(&#x27;确定开始下一步？[y/n]:&#x27;)) return flgCenterPosInt elif (blockEn == False): print(&#x27;Do not find &#123;para1&#125;\\n&#x27;.format(para1=flgPath)) return None else: print(&#x27;wait for &#123;para1&#125;\\n&#x27;.format(para1=flgPath)) time.sleep(1) 好了，python对adb的封装就讲到这里，期待你的留言和获取源码哦。我们下期见！ 趋势不会因为个别的吝啬与懒惰而停止向前的车轮，所以迈开脚步，一起赶路。 微信公众号：一番码客官方网站： www.efonmark.com","categories":[{"name":"软件开发实战","slug":"软件开发实战","permalink":"http://www.efonmark.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"}],"tags":[]},{"title":"python爬虫实战-微信公众号文章下载-(01)pycharm使用与工程搭建","slug":"软件开发实战/2019-03-16-python爬虫实战-微信公众号文章下载-(01)pycharm使用与工程搭建","date":"2019-03-15T16:00:00.000Z","updated":"2023-01-15T04:59:44.683Z","comments":true,"path":"2019/03/16/软件开发实战/2019-03-16-python爬虫实战-微信公众号文章下载-(01)pycharm使用与工程搭建/","link":"","permalink":"http://www.efonmark.com/2019/03/16/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/2019-03-16-python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E4%B8%8B%E8%BD%BD-(01)pycharm%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/","excerpt":"一番码客 : 效率软件推荐www.efonmark.com 风筝遇春风而起，春雨遇暖阳而至。精神食粮如期为你呈上。 所谓工欲善其事必先利其器，为了使用python搞事情，那首先是搭好环境，写下程序员的开山题词“hello world！”。","text":"一番码客 : 效率软件推荐www.efonmark.com 风筝遇春风而起，春雨遇暖阳而至。精神食粮如期为你呈上。 所谓工欲善其事必先利其器，为了使用python搞事情，那首先是搭好环境，写下程序员的开山题词“hello world！”。 跟很多初入一门语言的小伙伴一样，刚开始一番也百度了“python开发工具”之类的问题，但选来选去，目前还是觉得python开发使用最广的IDE-pycharm（社区版）用着顺手，切入最快。pycharm基本是基于eclipse开发的，很多使用习惯和快捷键都和eclipse类似，所以开发过APP或者之前就用eclipse开发的小伙伴可以说是倍感亲切，无缝切换。（虽然一番只是自学java时用过一段时间eclipse）。一番所有的文章和环境，都以ubuntu18.04为基础，并且作为软件开发，ubuntu真的是超顺手啦。 下载安装直入主题，如果是ubuntu18.04的话，系统自带的软件软件管理工具“ubuntu软件”里可以直接搜索pycharm CE，就可以找到pycharm免费社区版。当然也可以去pycharm官网下载：https://www.jetbrains.com/pycharm/download/ 。一番这里的安装后没有汉化，如果小伙伴们看英文不习惯的话，可以选择汉化一下。贴个汉化教程链接。 工程新建 打开 pycharm后，选择“Create New Project”。Location ：选择工程文件存放目录。Interpreter： 程序解释器：这里需要选择新建或者选择一个已有的python工程运行环境，也就是程序解释器。后面我们手动安装的各种python包（package、轮子）需要存放在这个目录(这里是venv这个目录)下。 解释器配置：一番为了保证每个工程的独立性和减少耦合，通常每个工程会用自己独立的程序解释器。并且不会继承全局包地址和使这个配置对所有工程可见，我们选择ubuntu默认带的比较新的3.6版本。配置如下图。 创建：配置好后我们点击创建”Create”既可以创建好了。这里有一个报错，现象与解决办法见文末”附录1”。 其他问题： hello world：开始干活啦！ 新建主文件：dangdangdang~ 。我们的主文件出现啦，写下我们的干活宣言。注意红框左上角的”Project Files”，这里是工程目录的展示方式，一番喜欢用”Project Files”的视角去查看整个工程的情况。 新建并指定解释器：完成工程新建后发现python console里还有报错，我们需要为工程指定解释器，见“附录2”。 运行：点击绿色运行按钮。啦啦啦，“hello world!”看世界对我们的友善回应。这样我们的工程就搭建结束啦，算是为后面工程的继续添砖加瓦打下了坚实的地基，所谓万行代码从”hello world”起。我们就可以在这个工程下继续添砖加瓦啦。 其他使用技巧 对于一个IDE的使用，包括快捷键、主题设置等等，这些其实并不是很重要，哪怕我们只会鼠标键盘，基于前面的三步，已经可以完成我们的整个工程开发了。但为了提高效率和舒适度，我们还是可以掌握一下的，这里一番为小伙伴们找了几篇相关文章，可以供大家拓展学习。 手把手教你配置最漂亮的PyCharm界面,Python程序员必备! Pycharm快捷键大全 其他：当然，基于eclipse的IDE可谓功能极其强大，还有一些开发和调试的实用技能，一番会在后面文章用到时穿插在各个功能开发与调试的文章中，在潜移默化中完成对pycharm的驾驭。 呼 ~ 打完收工！ 附录： 报错：ModuleNotFoundError: No module named ‘distutils.core’。原因：ubuntu默认没有安装pip安装器，这个会影响到我们安装python包（轮子）。解决：sudo apt-get install python3-pip 报错：Error:Python interpreter is not selected.Please setup Python interpreter first.原因：虽然我们创建工程的时候有新建解释器，但我们并没有完成指定，这需要我们给我们的工程指定解释器。解决：我们点击 “file” → “Setting” → “Project Interpreter” → “Add”，如下图，最后OK。选择我们刚新建的解释器。好啦，以后我们要为我们的工程添加新的依赖包时就点这里的“+”就可以啦，非常方便。然后我们为本工程指定解释器，以后我们点击绿色小三角运行我们的工程时就是用的这里指定的脚本入口和解释器啦。 下期预告：python爬虫实战-爬取微信公众号所有历史文章 - (02) python封装adb命令操作安卓手机 欢迎关注微信公众号“一番码客”获取免费下载服务与源码，并及时接收最新文章推送。点击“阅读原文”有惊喜。 趋势不会因为个别的吝啬与懒惰而停止向前的车轮，所以迈开脚步，一起赶路。 微信公众号：一番码客官方网站： www.efonmark.com","categories":[{"name":"软件开发实战","slug":"软件开发实战","permalink":"http://www.efonmark.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"}],"tags":[]}],"categories":[{"name":"软件开发实战","slug":"软件开发实战","permalink":"http://www.efonmark.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"}],"tags":[]}